<?xml version="1.0" encoding="UTF-8"?>
<!-- 30초 주기로 변경 감지 -->
<configuration scan="true" scanPeriod="30 seconds" debug="true">
    <!-- 로그 파일 저장 위치 -->
    <property name="LOGS_PATH" value="logs/local"/>

    <!-- 콘솔로 로그를 남김 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <charset>UTF-8</charset>
            <!-- 로그 메시지 패턴 -->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{5} - %msg%n</pattern>
        </encoder>
    </appender>

    <!-- 파일로 로그를 남김 -->
    <appender name="ROLLFILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 파일 경로 -->
        <file>${LOGS_PATH}/logback.log</file>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <charset>UTF-8</charset>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{5} - %msg%n</pattern>
        </encoder>

        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOGS_PATH}/logback.%d{yyyy-MM-dd}_%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- or whenever the file size reaches 100MB -->
                <!-- kb, mb, gb -->
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

            <!-- 30일 -->
            <maxHistory>30</maxHistory>
        </rollingPolicy>
    </appender>

    <!-- log4jdbc 옵션 설정 -->
    <logger name="jdbc" level="OFF"/>
    <!-- 커넥션 open close 이벤트를 로그 -->
    <logger name="jdbc.connection" level="OFF"/>
    <!-- SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다. -->
    <logger name="jdbc.sqlonly" level="OFF"/>
    <!-- SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다. -->
    <logger name="jdbc.sqltiming" level="DEBUG"/>
    <!-- ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다. -->
    <logger name="jdbc.audit" level="OFF"/>
    <!-- ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다. -->
    <logger name="jdbc.resultset" level="OFF"/>
    <!-- SQL 결과 조회된 데이터의 table을 로그로 남긴다. -->
    <logger name="jdbc.resultsettable" level="OFF"/>


    <!-- Framework log level -->
    <logger name="egovframework" level="info" additivity="false">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="ROLLFILE"/>
    </logger>
    <logger name="org.springframework" level="info" additivity="false">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="ROLLFILE"/>
    </logger>
    <logger name="org.springframework.scheduling" level="info" additivity="false">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="ROLLFILE"/>
    </logger>
    <logger name="org.springframework.web" level="debug" additivity="false">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="ROLLFILE"/>
    </logger>

    <!-- root는 글로벌 로거를 의미 위의 logger에 해당하지 않으면 root 로거가 실행 -->
    <root level="info">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="ROLLFILE"/>
    </root>

</configuration>